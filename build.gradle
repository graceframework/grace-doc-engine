buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:2.0.0"
    }
}

ext {
    isReleaseVersion = !project.projectVersion.endsWith('-SNAPSHOT')
}

group = "org.graceframework"
version = project.projectVersion

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

repositories {
    mavenCentral()
}

dependencies {
    api "org.slf4j:jcl-over-slf4j:2.0.17"
    compileOnly "org.apache.groovy:groovy:4.0.28"
    compileOnly "org.apache.groovy:groovy-templates:4.0.28"
    compileOnly "oro:oro:2.0.8"
    compileOnly "org.picocontainer:picocontainer:1.2"
    testImplementation "junit:junit:4.13.2"
    testImplementation "jmock:jmock:1.2.0"
    testImplementation "junitperf:junitperf:1.8"
    testImplementation "org.apache.groovy:groovy:4.0.28"
    testImplementation "org.apache.groovy:groovy-templates:4.0.28"
    testImplementation "oro:oro:2.0.8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

test {
    excludes = ["**/*Support.class"]
}

nexusPublishing {
    repositories {
        sonatype {
            def mavenUser = System.getenv("MAVEN_CENTRAL_USER") ?: project.hasProperty("mavenCentralUsername") ? project.mavenCentralUsername : ''
            def mavenPass = System.getenv("MAVEN_CENTRAL_PASSWORD") ?: project.hasProperty("mavenCentralPassword") ? project.mavenCentralPassword : ''
            nexusUrl = uri("https://ossrh-staging-api.central.sonatype.com/service/local/")
            snapshotRepositoryUrl = uri("https://central.sonatype.com/repository/maven-snapshots/")
            username = mavenUser
            password = mavenPass
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            pom {
                name = "Grace Doc Engine"
                description = "Grace Documentation engine used to generate Grace docs"
                url = 'https://github.com/graceframework/grace-doc-engine'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/graceframework/grace-doc-engine.git'
                    developerConnection = 'scm:git:ssh://github.com:graceframework/grace-doc-engine.git'
                    url = 'https://github.com/graceframework/grace-doc-engine'
                }
            }
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}
